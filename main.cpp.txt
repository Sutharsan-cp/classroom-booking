#include <iostream>
#include <vector>
#include <iomanip>
#include <queue>

const int t = 3; // Minimum degree

class BTreeNode {
public:
    std::vector<int> keys;
    std::vector<BTreeNode*> children;
    bool isLeaf;
    int numKeys;

    BTreeNode(bool _isLeaf) : isLeaf(_isLeaf), numKeys(0) {
        keys.resize(2 * t - 1);
        children.resize(2 * t);
    }
};

class BTree {
public:
    BTreeNode* root;

    BTree() : root(nullptr) {}

    void insert(int key) {
        if (!root) {
            root = new BTreeNode(true);
            root->keys[0] = key;
            root->numKeys = 1;
        } else {
            if (root->numKeys == 2 * t - 1) {
                BTreeNode* newRoot = new BTreeNode(false);
                newRoot->children[0] = root;
                splitChild(newRoot, 0);
                int i = 0;
                if (newRoot->keys[0] < key) i++;
                insertNonFull(newRoot->children[i], key);
                root = newRoot;
            } else {
                insertNonFull(root, key);
            }
        }
    }

    void splitChild(BTreeNode* parent, int i) {
        BTreeNode* fullChild = parent->children[i];
        BTreeNode* newChild = new BTreeNode(fullChild->isLeaf);
        newChild->numKeys = t - 1;

        for (int j = 0; j < t - 1; j++)
            newChild->keys[j] = fullChild->keys[j + t];

        if (!fullChild->isLeaf)
            for (int j = 0; j < t; j++)
                newChild->children[j] = fullChild->children[j + t];

        fullChild->numKeys = t - 1;
        parent->children.insert(parent->children.begin() + i + 1, newChild);
        parent->keys.insert(parent->keys.begin() + i, fullChild->keys[t - 1]);
        parent->numKeys++;
    }

    void insertNonFull(BTreeNode* node, int key) {
        int i = node->numKeys - 1;

        if (node->isLeaf) {
            while (i >= 0 && node->keys[i] > key) {
                node->keys[i + 1] = node->keys[i];
                i--;
            }
            node->keys[i + 1] = key;
            node->numKeys++;
        } else {
            while (i >= 0 && node->keys[i] > key) i--;
            i++;
            if (node->children[i]->numKeys == 2 * t - 1) {
                splitChild(node, i);
                if (node->keys[i] < key) i++;
            }
            insertNonFull(node->children[i], key);
        }
    }

    void printTree(BTreeNode* node, int depth = 0) {
        if (node) {
            // Use a queue for level order traversal
            std::queue<BTreeNode*> q;
            std::queue<int> levels;
            q.push(node);
            levels.push(depth);

            while (!q.empty()) {
                BTreeNode* current = q.front();
                int currentDepth = levels.front();
                q.pop();
                levels.pop();

                // Print indentation for the current depth
                std::cout << std::setw(currentDepth * 4) << "";

                // Print the keys in the current node
                for (int i = 0; i < current->numKeys; i++) {
                    std::cout << current->keys[i] << " ";
                }
                std::cout << std::endl;

                // Enqueue the children
                if (!current->isLeaf) {
                    for (int i = 0; i <= current->numKeys; i++) {
                        q.push(current->children[i]);
                        levels.push(currentDepth + 1);
                    }
                }
            }
        }
    }

    void print() {
        printTree(root);
    }
};

int main() {
    BTree btree;

    // Insert some keys
    btree.insert(10);
    btree.insert(20);
    btree.insert(5);
    btree.insert(6);
    btree.insert(12);
    btree.insert(30);
    std::cout << "B-tree structure:\n";
    btree.print();

    return 0;
}
